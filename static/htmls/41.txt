<h1>基于node + vue 搭建个人站点</h1><ul><li>后端代码参考：<a href="https://github.com/junthehacker/challenge-3-hours-blogging" target="_blank" style="color: rgb(3, 102, 214);">challenge-3-hours-blogging</a>，&nbsp;<a href="https://www.bilibili.com/video/av18704783?from=search&amp;seid=6901712256634222410" target="_blank" style="color: rgb(3, 102, 214);">bilibili的视频</a></li><li>前端样式参考：<a href="http://www.vicchen.me/giveup_wordpress_and_rewrite_my_blog/" target="_blank" style="color: rgb(3, 102, 214);">Vic Chen的博客</a></li></ul><h2><br></h2><h2>技术栈</h2><h3><br></h3><h3>后端及后台管理页面</h3><ul><li>Node + Express</li><li>单页Vue.js</li><li>Sqlite3</li></ul><h3><br></h3><h3>前端</h3><ul><li>Vue-cli（详细信息见FE目录下的readme文件）</li></ul><h2><br></h2><h2>环境搭建</h2><h3><br></h3><h3>后台管理</h3><ul><li>首先打开 config.js，修改&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">port</code>&nbsp;至你想用的端口，修改&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">adminPassword</code>&nbsp;为你的用户密码。</li><li>运行&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">npm install</code></li><li>运行&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">node app.js</code></li></ul><h3><br></h3><h3>前端展示</h3><ul><li>进入FE目录</li><li>npm i</li><li>npm run dev</li><li>打开127.0.0.1:8080查看效果</li></ul><h3><br></h3><h3>依赖</h3><ul><li>图片剪裁：<a href="http://elemefe.github.io/image-cropper/" target="_blank" style="color: rgb(3, 102, 214);">ElemeFE image-cropper</a></li><li>图片处理：<a href="http://aheckmann.github.io/gm/docs.html" target="_blank" style="color: rgb(3, 102, 214);">gm</a></li><li>重要步骤：1.安装软件 windows下注意ImageMagick安装过程中有一个选项<code style="background-color: rgba(27, 31, 35, 0.05);">install legacy (or older) utilities</code>要勾选，否则会报错command failed（无法执行命令） 2. npm install gm --save 3. app.js中<code style="background-color: rgba(27, 31, 35, 0.05);">let gm = require('gm').subClass({imageMagick: true});</code>&nbsp;4. 剪裁并保存：</li><li class="ql-indent-1"><br></li><li>gm环境安装</li><li>First download and install&nbsp;<a href="http://www.graphicsmagick.org/" target="_blank" style="color: rgb(3, 102, 214);">GraphicsMagick</a>&nbsp;or&nbsp;<a href="http://www.imagemagick.org/" target="_blank" style="color: rgb(3, 102, 214);">ImageMagick</a>. In Mac OS X, you can simply use Homebrew and do:<code style="background-color: rgba(27, 31, 35, 0.05);">brew install imagemagick</code>&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">brew install graphicsmagick</code></li><li class="ql-indent-2"><br></li><li class="ql-indent-2">If you want WebP support with ImageMagick, you must add the WebP option:&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">brew install imagemagick --with-webp</code></li><li class="ql-indent-2">then either use npm:&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">npm install gm --save</code></li><li class="ql-indent-1">or clone the repo:&nbsp;<code style="background-color: rgba(27, 31, 35, 0.05);">git clone git://github.com/aheckmann/gm.git</code></li><li class="ql-indent-1">ubuntu安装方法可能在这里有解决：<a href="https://stackoverflow.com/questions/48557587/gm-node-js-cant-resize-images-of-large-filesize" target="_blank" style="color: rgb(3, 102, 214);">https://stackoverflow.com/questions/48557587/gm-node-js-cant-resize-images-of-large-filesize</a></li><li>富文本编辑器&nbsp;<a href="https://quilljs.com/" target="_blank" style="color: rgb(3, 102, 214);">一款轻便的富文本编辑器---Quill</a>&nbsp;|&nbsp;<a href="https://blog.csdn.net/St_Sp_En/article/details/79103754" target="_blank" style="color: rgb(3, 102, 214);">简单示例</a></li></ul><h3><br></h3><h3>问题记录</h3><ul><li>解决不能上传过大图片的问题：413 (payload too large)(要加在app使用的最开始，加到中间发现不生效)</li></ul><pre class="ql-syntax" spellcheck="false">app.use(bodyParser.json({limit: '50mb'}));
app.use(bodyParser.urlencoded({limit: '50mb', extended: true}));
apiRouter.use(bodyParser.urlencoded({limit: '50mb', extended: true}))
apiRouter.use(bodyParser.json({limit: '50mb'}))
</pre><ul><li>node文件读写</li></ul><pre class="ql-syntax" spellcheck="false">console.log("准备写入文件");
fs.writeFile('input.txt', '我是通 过fs.writeFile 写入文件的内容',  function(err) {
   if (err) {
       return console.error(err);
   }
   console.log("数据写入成功！");
   console.log("--------我是分割线-------------")
   console.log("读取写入的数据！");
   fs.readFile('input.txt', function (err, data) {
      if (err) {
         return console.error(err);
      }
      console.log("异步读取文件数据: " + data.toString());
   });
});
</pre>